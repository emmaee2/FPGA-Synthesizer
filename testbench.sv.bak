module testbench();

timeunit 10ns;	// Half clock cycle at 50 MHz
			// This is the amount of time represented by #1 
timeprecision 1ns;

// These signals are internal because the processor will be 
// instantiated as a submodule in testbench.
logic Clk;
logic reset;
logic data_over;
logic init_finish;


// Instantiating the DUT
AES AES(.*);

//logic [127:0]  Cipherkey;
assign rndkey1 = AES.AES.KEY_SCHEDULE[127:0];
//assign rndkey11 = AES.AES.KEY_SCHEDULE[1407:1280];
//assign rndkey10 = AES.AES.KEY_SCHEDULE[1279:1152];
assign roundNum = AES.AES.roundNum;
assign count = AES.AES.state_controller.count;
assign KEY_SCHEDULE = AES.AES.KEY_SCHEDULE;

assign addroundkey_op = AES.AES.addroundkey_op;
assign invsubbytes_op = AES.AES.invsubbytes_op;
assign shiftrow_op = AES.AES.shiftrow_op;
assign mixcol_op = AES.AES.mixcol_op;

assign output_state_code = AES.AES.output_state_code;
assign AES_STATE = AES.AES.AES_STATE;
assign next_key = AES.AES.next_key;


always begin: CLOCK_GENERATION
	#1 CLK = ~CLK;
end

initial begin: CLOCK_INITALIZATION
	CLK = 0;
end

// Testing begins here
// The initial block is not synthesizable
// Everything happens sequentially inside an initial block
// as in a software program
initial begin: TEST_VECTORS
	RESET = 0;		
	AES_START = 0;
	
	#2 RESET = 1;
	#2 RESET = 0;
    
	#2 AES_KEY = 128'h000102030405060708090A0B0C0D0E0F;
	#2 AES_MSG_ENC = 128'hdaec3055df058e1c39e814ea76f6747e;
	
	#3 AES_START = 1; 
	
	#20 AES_START = 0;
	
	
	#300 AES_START = 1; 
	
	#20 AES_START = 0;
	
	#2 AES_KEY = 128'h000102030405060708090A0B0C0D0E0F;
	#2 AES_MSG_ENC = 128'hdaec3055df058e1c39e814ea76f6747e;
	
	



end
endmodule
